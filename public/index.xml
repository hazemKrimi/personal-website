<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hazem Krimi's content</title>
    <link>http://localhost:40885/</link>
    <description>Hazem Krimi's projects and blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>me@hazemkrimi.tech (Hazem Krimi)</managingEditor>
    <webMaster>me@hazemkrimi.tech (Hazem Krimi)</webMaster>
    <lastBuildDate>Wed, 18 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:40885/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>The Importance Of Contributing To Open Source</title>
        <link>http://localhost:40885/blog/importance-of-contributing-to-open-source/</link>
        <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><author>me@hazemkrimi.tech (Hazem Krimi)</author>
        <guid>http://localhost:40885/blog/importance-of-contributing-to-open-source/</guid>
        <description>&lt;p&gt;I recently started contributing to open source projects that I was using because I wanted to give back to those projects since they provide utilities I use on a daily basis either at work or on personal matters.&lt;/p&gt;
&lt;h2 id=&#34;what-will-you-learn-and-benefit-as-a-software-engineer&#34;&gt;What Will You Learn And Benefit As A Software Engineer?&lt;/h2&gt;
&lt;p&gt;Working on an open source project is similar to working on a project at a company. Since each project usually has a team of dedicated maintainers, resembling senior developers or tech leads, who review pull requests and merge them, are responsible for releases of the project and are responsible for its future direction by having a roadmap for example.&lt;/p&gt;
&lt;p&gt;Even though an open source codebase had many people contribute to it over the time, it is usually very well documented so it is fairly easy to get a big picture understanding of a project by reading the documentation. You can find documentation on the architecture, the directory structure of the codebase, project specific concepts or &amp;ldquo;business logic&amp;rdquo;. Also, you will always find guides on how to contribute, report bugs and how to install, run and debug the project on development mode. And if you get stuck, there are places where you can chat with fellow contributors or maintainers to get clarification or help.&lt;/p&gt;
&lt;p&gt;Therefore working on an open source project gives you experience in par with working at a company if not better. Because you will have to be truly autonomous with choosing what to work on, take the initiative and communicate with other people working on the project, and most importantly get deep into a new codebase and figure stuff out on your own for the most part.&lt;/p&gt;
&lt;p&gt;Another advantage is that you get to choose what project to work on and even what part of a project. This gives you the freedom and desire to learn about the processes of software engineering other that developing a project like deployment, testing and documentation. Not like in a company where you are tied to the position you got hired to do and even if you want to get into another area in a company project in my experience you will either slow the team down and potentially miss deadlines or you are denied access entirely.&lt;/p&gt;
&lt;h2 id=&#34;how-to-get-started&#34;&gt;How To Get Started?&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t stress it out and just pick a project you use and find interesting. Look for any beginner friendly issues like bugs or small improvements. Then get to the documentation and read it thoughouly to be on the know on any rules set by the project creator(s), get familiar with installing the project and running it in development mode, and know where the communications channel are to reach the team. Lastly, get to the codebase and start working on the thing you have chosen to do and eventually get it done and open a pull request.&lt;/p&gt;
</description>
      </item>
  </channel>
</rss>
